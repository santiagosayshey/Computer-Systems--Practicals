// Contains a function ArrMax.arrMax that finds and returns the largest element in the array a of length b.
// a & b are both supplied as arguments

// Put your code here.

function ArrMax.arrMax 2

// Initialize local variables
push constant 0
pop local 0               // local 0 (current index) = 0

push argument 0
pop pointer 1             // set THAT = m
push that 0
pop local 1               // local 1 (current max) = m[0]

label LOOP_START

    // Check if we have reached the end of the array
    push local 0              // push current index
    push argument 1           // push n
    lt
    if-goto PROCESS_ELEMENT
    goto LOOP_END

label PROCESS_ELEMENT

    // Compare current element with current max
    push that 0               // push m[current index]
    push local 1              // push current max
    gt
    if-goto UPDATE_MAX
    goto CONTINUE_LOOP

label UPDATE_MAX
    push that 0
    pop local 1               // update current max if the current element is greater

label CONTINUE_LOOP

    // Increment current index and THAT pointer for the next iteration
    push local 0
    push constant 1
    add
    pop local 0               // increment current index

    push pointer 1
    push constant 1
    add
    pop pointer 1             // increment THAT to point to the next element

    goto LOOP_START

label LOOP_END

    // Push the maximum value to the stack and return
    push local 1
    return
